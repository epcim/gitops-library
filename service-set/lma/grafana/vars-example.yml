context:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "traefik"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      hajimari.io/enable: "true"
      traefik.frontend.rule.type: PathPrefix
    

    hosts: [grafana.{{ args.domain }}]
    #tls:
    #- hosts:
    #  - grafana.{{ args.domain }}
  

  # kluctl deployment uses sops encrypted secretps
  assertNoLeakedSecrets: false


  datasources:
    datasources.yaml:
      apiVersion: 1
      # list of datasources that should be deleted from the database
      deleteDatasources:
        - name: Loki
          orgId: 1
      datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://thanos-query.mon.svc.cluster.local:9090/
        isDefault: true
      - name: Loki
        type: loki
        access: proxy
        url: http://loki.log.svc.cluster.local:3100
      #- name: influxdb
      #  type: influxdb
      #  access: proxy
      #  url: http://influxdb:8086
      #  database: telegraf
      - name: home_assistant
        type: influxdb
        access: proxy
        url: http://influxdb:8086
        database: home_assistant
      #- name: speedtests
      #  type: influxdb
      #  access: proxy
      #  url: http://influxdb:8086
      #  database: speedtests
      #- name: uptimerobot
      #  type: influxdb
      #  access: proxy
      #  url: http://influxdb:8086
      #  database: uptimerobot
      #- name: TrueNAS
      #  type: influxdb
      #  access: proxy
      #  url: http://influxdb:8086
      #  database: graphitedb
  grafana.ini:
    server:
      root_url: https://grafana.{{ args.domain }}
    # security:
    #   admin_user: admin@{{ args.domain }}
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: false
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    auth.basic:
      #enabled: false
      disable_login_form: true
    auth.anonymous:
       enabled: true
    #auth:
    #  disable_login_form: true
    auth.generic_oauth:
          # https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/#role-mapping
          enabled: true
          #allow_assign_grafana_admin: true
          allow_sign_up: true
          team_ids:
          #allowed_organizations: apealive
          #allowed_domains: {{ args.domain }}
          name: Auth0
          client_id: {{ secrets.grafana.auth0.client_id }}
          client_secret: {{ secrets.grafana.auth0.client_secret }}
          scopes: openid profile email
          auth_url: https://apealive.eu.auth0.com/authorize
          token_url: https://apealive.eu.auth0.com/oauth/token
          api_url: https://apealive.eu.auth0.com/userinfo
          #use_pkce: true
          # https://blog.dahanne.net/2020/04/15/integrating-auth0-oidc-oauth-2-with-authorization-groups-and-roles/
          # https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/#role-mapping
          role_attribute_path: contains("https://{{ args.domain }}/groups"[*], 'Admin') && 'Admin' || contains("https://{{ args.domain }}/groups"[*], 'Editor') && 'Editor' || 'Viewer'
