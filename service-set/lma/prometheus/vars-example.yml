# vim: ft=yaml.jinja2 syntax=yaml sts=2 ts=2 sw=2


kustomize:
  namespace: mon
  labels:
  - includeSelectors: true
    pairs:
      app: prometheus
  resources:
  - helm-rendered.yaml
  # RULES
  # FIXME, kluctl generator, render with sjsonnet
  - ./prometheus-rules/node-exporter.yaml
  - ./prometheus-rules/loki.yaml
  #- ./prometheus-rules/upsc.yaml
  generatorOptions:
    disableNameSuffixHash: true
  # secretGenerator:
  # - name: thanos-objstore-secret
  #   files:
  #   - config/thanos-objstore-filesystem.yaml

context:
  fullnameOverride: prometheus-stack

  grafana:
    enabled: false
    forceDeployDashboards: true

  kubelet:
    enabled: true
    serviceMonitor:
      metricRelabelings:
        - action: replace
          sourceLabels:
            - node
          targetLabel: instance

  kubeApiServer:
    enabled: true

  kubeControllerManager:
    enabled: true
    endpoints:
      - {{ secrets.cluster.vip.kube }}
    service:
      enabled: true
      port: 10257
      targetPort: 10257
    serviceMonitor:
      enabled: true
      https: true
      insecureSkipVerify: true

  kubeScheduler:
    enabled: true
    endpoints:
      - {{ secrets.cluster.vip.kube }}
    service:
      enabled: true
      port: 10259
      targetPort: 10259
    serviceMonitor:
      enabled: true
      https: true
      insecureSkipVerify: true

  kubeProxy:
    enabled: true
    endpoints:
      - {{ secrets.cluster.vip.kube }}

  kubeEtcd:
    enabled: true
    endpoints:
      - {{ secrets.cluster.vip.kube }}
    service:
      enabled: true
      port: 12379 #2381
      targetPort: 12379 # 2381


  prometheus:
    ingress:
      enabled: true
      pathType: Prefix
      annotations:
        kubernetes.io/ingress.class: "traefik"
        #nginx.ingress.kubernetes.io/auth-url: "https://auth.{{ args.domain }}/oauth2/auth"
        #nginx.ingress.kubernetes.io/auth-signin: https://auth.{{ args.domain }}/oauth2/start
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        hajimari.io/enable: "false"
        traefik.frontend.rule.type: PathPrefix
      hosts:
      - prom-server.{{ args.domain }}
      tls:
      - hosts:
        - prom-server.{{ args.domain }}

    prometheusSpec:
      # image:
      #   repository: quay.io/prometheus/prometheus
      #   tag: v2.20.0
      replicas: 1
      replicaExternalLabelName: "replica"
      ruleSelector: {}
      ruleNamespaceSelector: {}
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      podMonitorNamespaceSelector: {}
      podMonitorSelectorNilUsesHelmValues: false
      retention: 48h
      enableAdminAPI: true
      walCompression: true
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi
      ## tolerations:
      ## - key: "arm"
      ##   operator: "Exists"
      #podMetadata:
      #  annotations:
      #    backup.velero.io/backup-volumes: prometheus-kube-prometheus-stack-prometheus-db
      ### CONFIG SECTION ###
      additionalScrapeConfigs:
      #- job_name: 'node'
      #  static_configs:
      #  - targets:
      #    - FIXME_IP_OR_FQDN:9100
      - job_name: 'home-assistant'
        scrape_interval: 60s
        metrics_path: '/api/prometheus'
        bearer_token: '{{ secrets.prometheus.hass_token }}'
        scheme: http
        static_configs:
        - targets:
          - hass-home-assistant.home.svc:8123
      # - job_name: 'upsc-exporter'
      #   metrics_path: '/metrics'
      #   static_configs:
      #   - targets:
      #     - pi4-c.home:8081
      ### CONFIG SECTION ###

      thanos:
        image: quay.io/thanos/thanos:v0.30.2
        version: v0.30.2
        objectStorageConfig:
          name: thanos-objstore-secret
          key: objstore.yml
      resources:
        requests:
          memory: 2000Mi
          cpu: 250m
        limits:
          memory: 4000Mi
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - labelSelector:
      #         matchExpressions:
      #         - key: app.kubernetes.io/name
      #           operator: In
      #           values:
      #           - prometheus
      #       topologyKey: "kubernetes.io/hostname"
      podAntiAffinity: "hard"
    thanosService:
      enabled: true
    thanosServiceMonitor:
      enabled: true

  additionalAlertRelabelConfigs:
